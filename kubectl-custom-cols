#!/usr/bin/env bash

VERSION='v0.0.3'
SCRIPT_DIR="$( dirname "$( realpath "${BASH_SOURCE[0]}" )" )"
CONFIG="${SCRIPT_DIR}/templates"

# functions

function usage() {
  echo "kubectl custom-cols (${VERSION})"
  echo ''
  echo 'A "kubectl get" replacement with customizable column presets.'
  echo ''
  echo 'Synopsis:'
  echo ''
  echo '  kubectl custom-cols -o|--output <template-name> <rest of kubectl get command>'
  echo ''
  echo 'Examples:'
  echo ''
  echo '  * kubectl custom-cols -o images pods -l app=nginx'
  echo '  * kubectl custom-cols -o qos-class pods'
  echo '  * kubectl custom-cols -o limits pod zookeeper'
  echo ''
  echo "config dir is : ${SCRIPT_DIR}/templates"
  echo "supported templates:"
  for tpl in "${SCRIPT_DIR}"/templates/*.tpl; do
    echo "- $(basename -s .tpl $tpl)"
  done
  exit 0
}

# Parsing args
PARAMS=""
[ $# -lt 1 ] && usage

while (( "$#" )); do
  case "$1" in
    -h|--help)
      usage
      break
      ;;
    -o|--output)
      FARG=$2
      shift 2
      ;;
    --) # end argument parsing
      shift
      break
      ;;
    *) # preserve positional arguments
      PARAMS="$PARAMS $1"
      shift
      ;;
  esac
done

# set positional arguments in their proper place
eval set -- "$PARAMS"

# do the real stuff
if [ ! -r "${CONFIG}/${FARG}.tpl" ]; then
    echo "template not found";
    exit 1
else
    exec kubectl -o custom-columns-file="${CONFIG}/${FARG}.tpl" get "$@"
fi
